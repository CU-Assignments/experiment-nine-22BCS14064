 import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

import javax.persistence.*;

public class StudentCRUDApp {

    @Entity
    @Table(name = "students")
    public static class Student {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private int id;

        @Column(name = "name")
        private String name;

        @Column(name = "age")
        private int age;

        public Student() {}
        public Student(String name, int age) {
            this.name = name;
            this.age = age;
        }

        public int getId() { return id; }
        public String getName() { return name; }
        public int getAge() { return age; }

        public void setName(String name) { this.name = name; }
        public void setAge(int age) { this.age = age; }

        @Override
        public String toString() {
            return "Student{id=" + id + ", name='" + name + "', age=" + age + '}';
        }
    }
    public static void main(String[] args) {
        // Configure Hibernate
        Configuration cfg = new Configuration().configure().addAnnotatedClass(Student.class);
        SessionFactory sessionFactory = cfg.buildSessionFactory();

        Session session = sessionFactory.openSession();
        Transaction tx = session.beginTransaction();
        Student student = new Student("John Doe", 22);
        session.save(student);
        tx.commit();
        session.close();
        System.out.println("Student created: " + student);

        session = sessionFactory.openSession();
        Student retrieved = session.get(Student.class, student.getId());
        session.close();
        System.out.println("Student read: " + retrieved);

        session = sessionFactory.openSession();
        tx = session.beginTransaction();
        retrieved.setAge(23);
        session.update(retrieved);
        tx.commit();
        session.close();
        System.out.println("Student updated: " + retrieved);

        session = sessionFactory.openSession();
        tx = session.beginTransaction();
        session.delete(retrieved);
        tx.commit();
        session.close();
        System.out.println("Student deleted.");

        sessionFactory.close();
    }
}
